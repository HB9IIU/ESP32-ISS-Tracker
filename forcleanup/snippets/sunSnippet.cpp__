#include <sunset.h>  // Make sure this library is compatible with Arduino/ESP32
#include <WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

// Replace these with your Wi-Fi credentials
#define WIFI_SSID       "MESH"
#define WIFI_PASSWORD   "Nestle2010Nestle"

// Location settings
#define LATITUDE        46.4666463
#define LONGITUDE       6.8615008
#define DST_OFFSET      -1

// Initialize NTP client
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP);

SunSet sun;

void setup() {
    Serial.begin(115200);

    // Connect to Wi-Fi
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");

    // Initialize NTP client
    timeClient.begin();
    timeClient.setTimeOffset(DST_OFFSET * 3600);  // Set DST offset (in seconds)

    // Set the position for the SunSet object
    sun.setPosition(LATITUDE, LONGITUDE, DST_OFFSET);
}

void loop() {
    // Check if NTPClient update was successful
    if (timeClient.update()) {
        // Get the Unix timestamp (seconds since 1970)
        unsigned long epochTime = timeClient.getEpochTime();

        // Convert epoch time to a struct tm (broken-down time)
        struct tm *timeinfo;
        timeinfo = gmtime((time_t *)&epochTime);  // Cast to time_t

        // Set the current date for Sun calculations
        sun.setCurrentDate(timeinfo->tm_year + 1900, timeinfo->tm_mon + 1, timeinfo->tm_mday);

        // Get the sunrise and sunset times
        int sunrise = static_cast<int>(sun.calcSunrise());
        int sunset = static_cast<int>(sun.calcSunset());

        // Output results to Serial monitor
        Serial.printf("Sunrise at %d:%02dam, Sunset at %d:%02dpm\n", (sunrise / 60), (sunrise % 60), (sunset / 60), (sunset % 60));
    } else {
        Serial.println("NTP update failed. Check NTP server or internet connection.");
    }

    delay(1000);
}
