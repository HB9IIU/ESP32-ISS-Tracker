#include <WiFi.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <TFT_eSPI.h>         // Include the TFT library
#include <HB9IIU7segFonts.h> // Include the corrected font file

// Wi-Fi credentials
const char *ssid = "MESH";
const char *password = "Nestle2010Nestle";

// NTP Client settings
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 0, 60000); // Offset 0 for UTC, update every 60 seconds

// TFT display object
TFT_eSPI tft = TFT_eSPI();


void display7segmentClock(unsigned long unixTime, int xOffset, int yOffset, uint16_t textColor)
{
    // Static variables to track previous state and colon visibility
    static int previousArray[6] = {-1, -1, -1, -1, -1, -1}; // Initialize previous digit array
    static bool colonVisible = true;                       // Tracks colon visibility
  // Define the TFT_MIDGREY color as a local constant
    const uint16_t TFT_MIDGREY = 0x8D0F;    // Array of X coordinates for each digit
    int gap = 68;
    int gap2 = 20;
    int xCoordinates[6] = {xOffset, xOffset + gap, xOffset + 2 * gap + gap2, xOffset + 3 * gap + gap2, xOffset + 4 * gap + 2 * gap2, xOffset + 5 * gap + 2 * gap2};

    // Set the custom font
    tft.setFreeFont(&HB9IIU7segFonts);

    // Toggle colon visibility every second
    if (unixTime % 1 == 0)
    {
        colonVisible = !colonVisible;
    }

    // Display or hide colons based on colonVisible
    uint16_t colonColor = colonVisible ? textColor : TFT_BLACK;
    tft.setTextColor(colonColor, TFT_BLACK);
    tft.setCursor(xCoordinates[2] - 24, yOffset);
    tft.print(":");
    tft.setCursor(xCoordinates[4] - 24, yOffset);
    tft.print(":");

    // Calculate hours, minutes, and seconds
    int hours = (unixTime % 86400L) / 3600; // Hours since midnight
    int minutes = (unixTime % 3600) / 60;   // Minutes
    int seconds = unixTime % 60;            // Seconds

    // Current time digit array
    int timeArray[6] = {
        hours / 10,   // Tens digit of hours
        hours % 10,   // Units digit of hours
        minutes / 10, // Tens digit of minutes
        minutes % 10, // Units digit of minutes
        seconds / 10, // Tens digit of seconds
        seconds % 10  // Units digit of seconds
    };

    // Mapped characters for 0-9
    char mappedChars[10] = {'@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'};

    // Update only changed digits
    for (int i = 0; i < 6; i++)
    {
        if (timeArray[i] != previousArray[i])
        {
            // Clear the previous digit
            tft.setTextColor(TFT_BLACK, TFT_BLACK);
            tft.setCursor(xCoordinates[i], yOffset);
            tft.print(previousArray[i]);

            // Print the new digit
            tft.setTextColor(textColor, TFT_BLACK);
            tft.setCursor(xCoordinates[i], yOffset);
            tft.print(timeArray[i]);

            // Print the mapped character below the digit, but skip if the mapped character is 'H'
            tft.setTextColor(TFT_MIDGREY, TFT_BLACK);

            char mappedChar = mappedChars[timeArray[i]]; // Get the mapped character
            if (mappedChar != 'H')
            {
                tft.setCursor(xCoordinates[i], yOffset); // Adjust Y offset for character display
                tft.print(mappedChar);
            }
        }
    }

    // Update the previous array
    for (int i = 0; i < 6; i++)
    {
        previousArray[i] = timeArray[i];
    }
}


void setup()
{
    // Initialize Serial Monitor
    Serial.begin(115200);

    // Initialize TFT backlight pin
    pinMode(TFT_BLP, OUTPUT);
    digitalWrite(TFT_BLP, HIGH); // Turn on the backlight

    // Initialize TFT display
    tft.init();         // Initialize the display
    tft.setRotation(1); // Adjust rotation if needed
    tft.setTextFont(4);
    tft.fillScreen(TFT_BLACK); // Clear the display

    // Display startup message
    tft.setTextColor(TFT_WHITE, TFT_BLACK);
    tft.setCursor(10, 10);
    tft.println("Initializing...");

    // Connect to Wi-Fi
    Serial.print("Connecting to Wi-Fi");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED)
    {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected to Wi-Fi");
    tft.setCursor(10, 50);
    tft.println("Wi-Fi Connected");

    // Start NTP client
    timeClient.begin();

    tft.fillScreen(TFT_BLACK); // Clear the display
}

void loop()
{
    // Update the time
    timeClient.update();

    // Get the current UNIX time and display it
    unsigned long unixTime = timeClient.getEpochTime();
    display7segmentClock(unixTime, 24,90, TFT_GREEN);

    delay(1000); // Update every second
}
